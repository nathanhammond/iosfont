#!/usr/bin/env fontforge -lang=py

# iosfont v0.1.0
import sys, os.path, fontforge, paramiko, plistlib, xml, re, urllib, time
from subprocess import call
from datetime import datetime

def version(output=True):
	version = '0.1.0'
	if output:
		print 'iosfont v{0}'.format(version)
	return version

# Use fontforge to parse the font file.
def fontattributes(font):
	attributes = {'Family':'','SubFamily':'','Fullname':'','PostScriptName':'','Location':'','Filename':''}

	# Split file name from file location.
	attributes['Location'] = font
	attributes['Filename'] = os.path.basename(font)

	font = fontforge.open(font)

	nametable = font.sfnt_names

	# I live in a US-centric world.
	def f(x): return x[0] == 'English (US)'

	# And I only care about a few attributes.
	def g(x): return x[1] in attributes

	nametable = filter(f, nametable)
	nametable = filter(g, nametable)

	for tableentry in nametable:
		attributes[tableentry[1]] = tableentry[2]

	attributes['SubFamily'] = processsubfamily(attributes['SubFamily'])
	return attributes

# Shoehorn the family style into Apple's definitions.
def processsubfamily(subfamily):
	subfamily = subfamily.lower()

	bold = ['bold','heavy','black','negreta']
	italic = ['italic','oblique','obl','slanted']

	hasbold = 0
	hasitalic = 0

	for keyword in bold:
		if keyword in subfamily: hasbold = True

	for keyword in italic:
		if keyword in subfamily: hasitalic = True

	if hasbold and hasitalic:
		return 'Bold-Italic'
	elif hasbold:
		return 'Bold'
	elif hasitalic:
		return 'Italic'
	else:
		return 'Plain'

def nextsubfamilyindex(subfamilylist, subfamily):
	def f(x): return x.find(subfamily+'_') == 0 or x == subfamily
	subfamilylist = filter(f, subfamilylist)
	return len(subfamilylist)

# Set up an ssh connection.
def createconnection(hostname):
	client = paramiko.SSHClient()
	client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
	client.connect(hostname, username='root')
	sftp = client.open_sftp()

	return client, sftp

# Get config files from the phone.
def getconfigfiles(hostname, targetdir):
	# Some magic names.
	directories = {'ConfStorage':'/System/Library/Fonts/','FontStorage':'/System/Library/Fonts/Cache/'}
	plists = ['CGFontCacheReduced_H_.plist','CGFontCacheReduced_UH_.plist','CGFontCacheFull_H_.plist','CGFontCacheFull_UH_.plist']

	client, sftp = createconnection(hostname)

	# Make the folder if it doesn't exist.
	if not os.path.exists(targetdir):
		os.makedirs(targetdir,0755)

	# Get the plist files from the phone.
	for plist in plists:
		sftp.get(directories['ConfStorage'] + plist, targetdir + plist)

	# One more, see if we've got our own fonts loaded.
	try:
		sftp.get(directories['ConfStorage'] + 'Custom.plist', targetdir + 'Custom.plist')
	except IOError:
		call(['touch', targetdir + 'Custom.plist'])

	# Clean up after ourselves.
	sftp.close()
	client.close()

	return

def putconfigfiles(hostname, sourcedir):
	# Some magic names.
	directories = {'ConfStorage':'/System/Library/Fonts/','FontStorage':'/System/Library/Fonts/Cache/'}
	plists = ['CGFontCacheReduced_H_.plist','CGFontCacheReduced_UH_.plist','CGFontCacheFull_H_.plist','CGFontCacheFull_UH_.plist']

	client, sftp = createconnection(hostname)

	# Put the updated plists on the phone.
	for plist in plists:
		print 'Copy plist {0} to phone.'.format(sourcedir + plist)
		sftp.put(sourcedir + plist, directories['ConfStorage']+plist)

	# One more, store our Custom.plist on the phone.
	print 'Copy plist {0} to phone.'.format('Custom.plist')
	sftp.put(sourcedir + 'Custom.plist', directories['ConfStorage']+'Custom.plist')

	# Clean up after ourselves.
	sftp.close()
	client.close()

	return

def rebootphone(hostname):
	client, sftp = createconnection(hostname)

	# Don't need sftp.
	sftp.close()

	# Reboot the phone to update the fonts.
	print 'Reboot the phone to update the fonts.'
	client.exec_command('reboot');

	# Clean up after ourselves.
	client.close()

	return

def keyinplists(key, plists, path):
	for plist in plists:
		if key in path(plist):
			return True
	else:
		return False

def install(hostname, fonts):
	# Some magic names.
	directories = {'ConfStorage':'/System/Library/Fonts/','FontStorage':'/System/Library/Fonts/Cache/'}
	plists = ['CGFontCacheReduced_H_.plist','CGFontCacheReduced_UH_.plist','CGFontCacheFull_H_.plist','CGFontCacheFull_UH_.plist','Custom.plist']
	plistcontents = []

	# Before we get started, give ourselves a lifeline.
	backup(hostname)

	# Get our needed connection to the phone.
	client, sftp = createconnection(hostname)

	# Process each font.
	for i in range(0,len(fonts)):
		fonts[i] = dict(fontattributes(fonts[i]).items() + directories.items())

	# TODO: Prevent the installation of fonts that will muck up the system.

	# Create our working directory
	workingdir = os.path.expanduser('~/.iosfont/'+hostname+'/current/')
	if not os.path.exists(workingdir):
		os.makedirs(workingdir,0755)

	getconfigfiles(hostname, workingdir)

	fontstoinstall = 0

	# Load the plists.
	for plist in plists:
		# Convert the plist to XML.
		call(["plutil", "-convert", "xml1", workingdir + plist])

		# Read the file in.
		try:
			plistcontents.append(plistlib.readPlist(workingdir + plist))
		except (IOError, xml.parsers.expat.ExpatError):
			plistcontents.append({'Names':{},'TraitMappings':{}})

	# Add the fonts to the plists.
	for font in fonts:
		if keyinplists(font['PostScriptName'], plistcontents, lambda plist: plist['Names'].keys()):
			print 'Font {0} is already installed. Skipping.'.format(font['Fullname'])
			continue

		for plist in plistcontents:
			plist['Names'][font['Fullname']] = font['FontStorage']+font['Filename']
			plist['Names'][font['PostScriptName']] = font['FontStorage']+font['Filename']

		# Make sure the font's family exists in the traitmaps.
		for plist in plistcontents:
			if not font['Family'] in plist['TraitMappings']:
				plist['TraitMappings'][font['Family']] = {}

		# Identify whether the subfamily is already defined.
		if not keyinplists(font['SubFamily'], plistcontents, lambda plist: plist['TraitMappings'][font['Family']]):
			# This is easy, it doesn't exist, just add it.
			for plist in plistcontents:
				plist['TraitMappings'][font['Family']][font['SubFamily']] = font['PostScriptName']
		else:
			# 1. Identify what already exists in each plist.
			subfamilykeys = []
			for plist in plistcontents:
				subfamilykeys.extend(plist['TraitMappings'][font['Family']].keys())

			subfamilykeys = set(subfamilykeys)

			# 2. Identify what is next: max([existing]) + 1
			nextindex = nextsubfamilyindex(subfamilykeys, font['SubFamily'])

			# 3. Set the value in each plist.
			for plist in plistcontents:
				plist['TraitMappings'][font['Family']][font['SubFamily'] + '_' + str(nextindex)] = font['PostScriptName']

		# Put the font on the phone.
		print 'Copy font {Location} to phone.'.format(**font)
		sftp.put(font['Location'], directories['FontStorage']+font['Filename'])

		# Keep track.
		fontstoinstall += 1

	# Save the plists.
	for plist in plists:
		plistlib.writePlist(plistcontents.pop(0), workingdir + plist)

		# Convert the plist back to binary.
		call(["plutil", "-convert", "binary1", workingdir + plist])

	if fontstoinstall > 0:
		putconfigfiles(hostname, workingdir)
		rebootphone(hostname)

	return

def backup(hostname):
	# Create the backup folder.
	timestamp = time.time()
	backupdir = os.path.expanduser('~/.iosfont/'+hostname+'/'+str(timestamp)+'/')

	print "Backing up config files to {0}".format(backupdir)
	getconfigfiles(hostname, backupdir)

	return

def revert(hostname):
	# Get the oldest timestamp directory in ~/.iosfont/[hostname]/
	hostdir = os.path.expanduser('~/.iosfont/'+hostname+'/')
	def f(x): return x != 'current'
	targetdir = sorted(filter(f, os.listdir(hostdir)), reverse=True)[0]
	then = datetime.fromtimestamp(float(targetdir))

	print "Reverting config files to backup from {0}".format(then.strftime("%d %b %Y %H:%M:%S"))
	putconfigfiles(hostname,hostdir+targetdir+'/')

	return

def restore(hostname):
	# Get the oldest timestamp directory in ~/.iosfont/[hostname]/
	hostdir = os.path.expanduser('~/.iosfont/'+hostname+'/')
	def f(x): return x != 'current'
	targetdir = sorted(filter(f, os.listdir(hostdir)))[0]

	print "Restoring config files to the Apple-supplied default."
	putconfigfiles(hostname,hostdir+targetdir+'/')

	return

def uninstall(hostname,fonts):
	# We can't trust the font specified to be identical.
	# The best we can do is key off of one particular attribute (PostScriptName) and remove that font from the phone instead.

	# Some magic names.
	directories = {'ConfStorage':'/System/Library/Fonts/','FontStorage':'/System/Library/Fonts/Cache/'}
	plists = ['CGFontCacheReduced_H_.plist','CGFontCacheReduced_UH_.plist','CGFontCacheFull_H_.plist','CGFontCacheFull_UH_.plist','Custom.plist']
	plistcontents = []

	# Before we get started, give ourselves a lifeline.
	backup(hostname)

	# Get our needed connection to the phone.
	client, sftp = createconnection(hostname)

	# Process each font, but truly we only care about PostScriptName. Everything else is going to come from Custom.plist
	for i in range(0,len(fonts)):
		fonts[i] = dict(fontattributes(fonts[i]).items() + directories.items())

	# Create our working directory
	workingdir = os.path.expanduser('~/.iosfont/'+hostname+'/current/')
	if not os.path.exists(workingdir):
		os.makedirs(workingdir,0755)

	getconfigfiles(hostname, workingdir)

	fontstoremove = 0

	# Load the plists.
	for plist in plists:
		# Convert the plist to XML.
		call(["plutil", "-convert", "xml1", workingdir + plist])

		# Read the file in.
		try:
			plistcontents.append(plistlib.readPlist(workingdir + plist))
		except (IOError, xml.parsers.expat.ExpatError):
			plistcontents.append({'Names':{},'TraitMappings':{}})

	# Remove the font from the plists.
	for font in fonts:

		# See if the font is installed. If not, skip it.
		if not font['PostScriptName'] in plistcontents[4]['Names']:
			print 'Font {0} is not installed. Skipping.'.format(font['Fullname'])
			continue

		# Get the second part of our two-piece key.
		font['Filename'] = os.path.basename(plistcontents[4]['Names'][font['PostScriptName']])

		# Use font['Filename'] to find the pair of entries in plist['Names']
		for key in plistcontents[4]['Names'].keys():
			if plistcontents[4]['Names'][key] == (directories['FontStorage'] + font['Filename']) and key != font['PostScriptName']:
				# Store the content to delete later.
				font['Fullname'] = key

		# Find the font['PostScriptName'] to find and remove the entry in leaf nodes of plist['TraitMappings'][?family][?subfamily].
		for family in plistcontents[4]['TraitMappings'].keys():
			for subfamily in plistcontents[4]['TraitMappings'][family].keys():
				if plistcontents[4]['TraitMappings'][family][subfamily] == font['PostScriptName']:
					font['Family'] = family
					font['SubFamily'] = subfamily
					font['RootSubFamily'],a,font['SubFamilyIndex'] = subfamily.partition('_')

		# Okay, font is now defined fully based upon the information in Custom.plist, let's remove it.
		for plist in plistcontents:
			del plist['Names'][font['PostScriptName']]
			del plist['Names'][font['Fullname']]

			subfamilylist = plist['TraitMappings'][font['Family']].keys()
			subfamilylist = filter(lambda x: x.find(font['RootSubFamily']+'_') == 0 or x == font['RootSubFamily'], subfamilylist)

			if len(plist['TraitMappings'][font['Family']]) == 1:
				# We have only one subfamily in this font['Family']. Remove the whole family.
				del plist['TraitMappings'][font['Family']]
			elif len(subfamilylist) > 1:
				# We have duplicate subfamilies in this font['Family']

				if font['SubFamilyIndex'] == '':
					# In case this happens to be the 0th index.
					font['SubFamilyIndex'] = 0
				else:
					# Still need to convert it to an integer.
					font['SubFamilyIndex'] = int(font['SubFamilyIndex'])

				# Smartly collapse numeric indices on (top of) the duplicate SubFamily types.
				for i in range(font['SubFamilyIndex'],len(subfamilylist)-1):
					plist['TraitMappings'][font['Family']][font['RootSubFamily']+('', '_'+str(i))[i!=0]] = plist['TraitMappings'][font['Family']][font['RootSubFamily']+'_'+str(i+1)]

				# And delete the top of the range.
				del plist['TraitMappings'][font['Family']][font['RootSubFamily']+'_'+str(len(subfamilylist)-1)]

			else:
				# No duplicates, and there are still others in the family.
				del plist['TraitMappings'][font['Family']][font['SubFamily']]

		# Remove the font from the phone.
		print 'Remove font {Location} from phone.'.format(**font)
		sftp.remove(directories['FontStorage']+font['Filename'])

		# Keep track.
		fontstoremove += 1

	# Save the plists.
	for plist in plists:
		plistlib.writePlist(plistcontents.pop(0), workingdir + plist)

		# Convert the plist back to binary.
		call(["plutil", "-convert", "binary1", workingdir + plist])

	if fontstoremove > 0:
		putconfigfiles(hostname, workingdir)
		rebootphone(hostname)

	return

def compareversion(client,server):

	def f(x): return int(x)
	client = map(f, client.split('.'))
	server = map(f, server.split('.'))

	for i in range(3):
		if client[i] < server[i]:
			return True

	return False

# Download the most recent version of iosfont
def update():
	serverversion = urllib.urlopen('https://raw.github.com/nathanhammond/iosfont/master/VERSION').readline()

	update = compareversion(version(False),serverversion)

	if update:
		os.remove('/usr/local/bin/iosfont')
		urllib.urlretrieve('https://raw.github.com/nathanhammond/iosfont/master/iosfont', '/usr/local/bin/iosfont')
		os.chmod('/usr/local/bin/iosfont', 0755)
		print 'You were running iosfont v{0}. You have been updated to iosfont v{1}'.format(version(False),serverversion)
	else:
		print 'You are already running the most recent version of iosfont.'

	return

def main():
	commands = ['install','backup','restore','revert','uninstall','update','version']
	nohostname = ['update','version']

	# Command option is required.
	if not (len(sys.argv) > 1):
		print 'Argument command is required.'
		return

	# Check for valid command.
	if sys.argv[1] in commands:
		command = sys.argv[1]
	else:
		print 'Argument command is required.'
		return

	# Check to see if hostname is required.
	if command not in nohostname:
		if not (len(sys.argv) > 2):
			print 'Argument hostname is required.'
			return

		# Set the hostname.
		hostname = sys.argv[2]

		# Check for valid hostname.
		# I know that this will match 999.999.999.999 and I don't care. This is just to force name-based addressing.
		if re.match('^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$', hostname):
			print 'You must use a name-based address for your phone.'
			return

	# Set the fonts array.
	if len(sys.argv) > 3:
		fonts = sys.argv[3:]
	else:
		fonts = []

	if command == 'install':
		install(hostname, fonts)
	elif command == 'uninstall':
		uninstall(hostname, fonts)
	elif command == 'backup':
		backup(hostname)
	elif command == 'restore':
		restore(hostname)
	elif command == 'revert':
		revert(hostname)
	elif command == 'update':
		update()
	elif command == 'version':
		version()

	return

# Run it!
main()